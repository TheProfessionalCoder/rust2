use std::io;

fn calculate_average(numbers: &[f64]) -> f64 {
    let sum: f64 = numbers.iter().sum();
    sum / numbers.len() as f64
}

fn generate_prime_numbers(limit: u64) -> Vec<u64> {
    let mut primes = Vec::new();
    for num in 2..=limit {
        let mut is_prime = true;
        for i in 2..=(num as f64).sqrt() as u64 {
            if num % i == 0 {
                is_prime = false;
                break;
            }
        }
        if is_prime {
            primes.push(num);
        }
    }
    primes
}

fn reverse_string(text: &str) -> String {
    let reversed: String = text.chars().rev().collect();
    reversed
}

fn find_maximum(numbers: &[i32]) -> Option<i32> {
    if numbers.is_empty() {
        return None;
    }
    let mut max = numbers[0];
    for &num in numbers.iter() {
        if num > max {
            max = num;
        }
    }
    Some(max)
}

fn main() {
    println!("Welcome to the Random Rust Program!");

    loop {
        println!("\nPlease choose an option:");
        println!("1. Calculate average of numbers");
        println!("2. Generate prime numbers");
        println!("3. Reverse a string");
        println!("4. Find maximum number");
        println!("5. Quit");

        let mut choice = String::new();
        io::stdin()
            .read_line(&mut choice)
            .expect("Failed to read input.");

        let choice: u8 = match choice.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("Invalid choice. Please try again.");
                continue;
            }
        };

        match choice {
            1 => {
                println!("Enter a list of numbers (space-separated):");
                let mut input = String::new();
                io::stdin()
                    .read_line(&mut input)
                    .expect("Failed to read input.");

                let numbers: Vec<f64> = input
                    .split_whitespace()
                    .map(|s| s.parse().unwrap())
                    .collect();

                let average = calculate_average(&numbers);
                println!("Average: {:.2}", average);
            }
            2 => {
                println!("Enter the upper limit to generate prime numbers:");
                let mut input = String::new();
                io::stdin()
                    .read_line(&mut input)
                    .expect("Failed to read input.");

                let limit: u64 = match input.trim().parse() {
                    Ok(num) => num,
                    Err(_) => {
                        println!("Invalid limit. Please try again.");
                        continue;
                    }
                };

                let primes = generate_prime_numbers(limit);
                println!("Prime numbers: {:?}", primes);
            }
            3 => {
                println!("Enter a string to reverse:");
                let mut input = String::new();
                io::stdin()
                    .read_line(&mut input)
                    .expect("Failed to read input.");

                let reversed = reverse_string(&input.trim());
                println!("Reversed string: {}", reversed);
            }
            4 => {
                println!("Enter a list of numbers (space-separated):");
                let mut input = String::new();
                io::stdin()
                    .read_line(&mut input)
                    .expect("Failed to read input.");

                let numbers: Vec<i32> = input
                    .split_whitespace()
                    .map(|s| s.parse().unwrap())
                    .collect();

                if let Some(maximum) =
